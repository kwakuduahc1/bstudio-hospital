// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using bStudioHospital.Model;

namespace WinClinic.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20181116145809_SplitPatientDetails")]
    partial class SplitPatientDetails
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("bStudioHospital.Model.Accounts.Schemes", b =>
                {
                    b.Property<Guid>("SchemesID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Scheme")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("Status");

                    b.HasKey("SchemesID");

                    b.ToTable("Schemes");
                });

            modelBuilder.Entity("bStudioHospital.Model.Accounts.ServiceCodes", b =>
                {
                    b.Property<Guid>("ServiceCodesID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("Cost");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<Guid>("SchemesID");

                    b.Property<string>("ServiceCode")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ServicesID");

                    b.Property<bool>("Status");

                    b.HasKey("ServiceCodesID");

                    b.HasIndex("SchemesID");

                    b.HasIndex("ServicesID");

                    b.ToTable("ServiceCodes");
                });

            modelBuilder.Entity("bStudioHospital.Model.Accounts.Services", b =>
                {
                    b.Property<Guid>("ServicesID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Service")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("ServiceGroup")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<Guid>("ServiceTypesID");

                    b.Property<bool>("Status");

                    b.HasKey("ServicesID");

                    b.HasIndex("ServiceTypesID");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("bStudioHospital.Model.ConsultingRoom.AdmissionInstructions", b =>
                {
                    b.Property<long>("AdmissionInstructionsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Instructions")
                        .HasMaxLength(200);

                    b.Property<long>("PatientAdmissionsID");

                    b.HasKey("AdmissionInstructionsID");

                    b.HasIndex("PatientAdmissionsID");

                    b.ToTable("AdmissionInstructions");
                });

            modelBuilder.Entity("bStudioHospital.Model.ConsultingRoom.Diagnoses", b =>
                {
                    b.Property<Guid>("DiagnosesID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<string>("Diagnosis")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UserName")
                        .HasMaxLength(30);

                    b.HasKey("DiagnosesID");

                    b.ToTable("Diagnoses");
                });

            modelBuilder.Entity("bStudioHospital.Model.ConsultingRoom.DiagnosticCodes", b =>
                {
                    b.Property<Guid>("DiagnosticCodesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid>("DiagnosesID");

                    b.Property<string>("GDRG")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("ICDCode")
                        .HasMaxLength(15);

                    b.Property<Guid>("SchemesID");

                    b.Property<double>("Tariff");

                    b.HasKey("DiagnosticCodesID");

                    b.HasIndex("DiagnosesID");

                    b.HasIndex("SchemesID");

                    b.ToTable("DiagnosticCodes");
                });

            modelBuilder.Entity("bStudioHospital.Model.ConsultingRoom.PatientConsultation", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Complaints")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Examination")
                        .HasMaxLength(500);

                    b.Property<string>("PatientsID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhysicianNotes")
                        .HasMaxLength(500);

                    b.Property<string>("UserName");

                    b.HasKey("ID");

                    b.HasIndex("PatientsID");

                    b.ToTable("PatientConsultations");
                });

            modelBuilder.Entity("bStudioHospital.Model.ConsultingRoom.PatientDiagnosis", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<Guid>("DiagnosticCodesID");

                    b.Property<string>("PatientsID")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("DiagnosticCodesID");

                    b.HasIndex("PatientsID");

                    b.ToTable("PatientDiagnosis");
                });

            modelBuilder.Entity("bStudioHospital.Model.DrugCodes", b =>
                {
                    b.Property<Guid>("DrugCodesID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("Cost");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("DrugCode")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<Guid>("DrugsID");

                    b.Property<Guid>("SchemesID");

                    b.HasKey("DrugCodesID");

                    b.HasIndex("DrugsID");

                    b.HasIndex("SchemesID");

                    b.ToTable("DrugCodes");
                });

            modelBuilder.Entity("bStudioHospital.Model.Laboratory.LabGroups", b =>
                {
                    b.Property<short>("LabGroupsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<decimal>("Cost");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("LabGroupsID");

                    b.ToTable("LabGroups");
                });

            modelBuilder.Entity("bStudioHospital.Model.Laboratory.LaboratoryServices", b =>
                {
                    b.Property<Guid>("LaboratoryServicesID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<short>("LabGroupsID");

                    b.Property<string>("LaboratoryProcedure")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("LaboratoryServicesID");

                    b.HasIndex("LabGroupsID");

                    b.ToTable("LaboratoryServices");
                });

            modelBuilder.Entity("bStudioHospital.Model.Laboratory.PatientLaboratoryServices", b =>
                {
                    b.Property<long>("PatientLaboratoryServicesID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountsOfficer")
                        .HasMaxLength(30);

                    b.Property<decimal>("Amount");

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime?>("DatePaid");

                    b.Property<DateTime>("DateRequested");

                    b.Property<DateTime>("DateServed");

                    b.Property<bool>("IsPaid");

                    b.Property<bool>("IsServed");

                    b.Property<string>("LabOfficer")
                        .HasMaxLength(30);

                    b.Property<Guid>("LaboratoryServicesID");

                    b.Property<string>("Notes")
                        .HasMaxLength(100);

                    b.Property<string>("PatientsID")
                        .HasMaxLength(20);

                    b.Property<string>("RequestingOfficer")
                        .HasMaxLength(30);

                    b.Property<string>("Results")
                        .HasMaxLength(200);

                    b.HasKey("PatientLaboratoryServicesID");

                    b.HasIndex("LaboratoryServicesID");

                    b.HasIndex("PatientsID");

                    b.ToTable("PatientLaboratoryServices");
                });

            modelBuilder.Entity("bStudioHospital.Model.NursingCare.DrugAdministrations", b =>
                {
                    b.Property<long>("DrugAdministrationsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long>("PatientMedicationsID");

                    b.Property<Guid?>("PatientMedicationsID1");

                    b.Property<string>("UserName")
                        .HasMaxLength(30);

                    b.HasKey("DrugAdministrationsID");

                    b.HasIndex("PatientMedicationsID1");

                    b.ToTable("DrugAdministrations");
                });

            modelBuilder.Entity("bStudioHospital.Model.NursingCare.NursesWards", b =>
                {
                    b.Property<int>("NursesWardsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("UserName")
                        .HasMaxLength(30);

                    b.Property<string>("WardName");

                    b.HasKey("NursesWardsID");

                    b.HasIndex("WardName");

                    b.ToTable("NursesWards");
                });

            modelBuilder.Entity("bStudioHospital.Model.NursingCare.PatientAdmissions", b =>
                {
                    b.Property<long>("PatientAdmissionsID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateAdmitted");

                    b.Property<DateTime?>("DateDischarged");

                    b.Property<bool>("Discharged");

                    b.Property<string>("PatientsID")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .HasMaxLength(30);

                    b.Property<string>("WardName")
                        .HasMaxLength(50);

                    b.HasKey("PatientAdmissionsID");

                    b.HasIndex("PatientsID");

                    b.HasIndex("WardName");

                    b.ToTable("PatientAdmissions");
                });

            modelBuilder.Entity("bStudioHospital.Model.NursingCare.PatientMedications", b =>
                {
                    b.Property<Guid>("PatientMedicationsID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Completed");

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<byte>("Frequency");

                    b.Property<byte>("NumberOfDays");

                    b.Property<string>("PatientsID")
                        .IsRequired();

                    b.Property<string>("UserName")
                        .HasMaxLength(30);

                    b.HasKey("PatientMedicationsID");

                    b.HasIndex("PatientsID");

                    b.ToTable("PatientMedications");
                });

            modelBuilder.Entity("bStudioHospital.Model.OPD.OPD", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateSeen");

                    b.Property<double>("Diastolic");

                    b.Property<string>("FirstAid")
                        .HasMaxLength(500);

                    b.Property<string>("History")
                        .HasMaxLength(500);

                    b.Property<string>("PatientsID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<double>("Pulse");

                    b.Property<double>("Respiration");

                    b.Property<double>("Systolic");

                    b.Property<double>("Temperature");

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.Property<double>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("PatientsID");

                    b.ToTable("OpdHistory");
                });

            modelBuilder.Entity("bStudioHospital.Model.Pharmacy.Drugs", b =>
                {
                    b.Property<Guid>("DrugsID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.Property<string>("GroupName")
                        .HasMaxLength(100);

                    b.HasKey("DrugsID");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("bStudioHospital.Model.Pharmacy.PatientDrugs", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("AmountPaid");

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DatePaid");

                    b.Property<DateTime>("DateRequested");

                    b.Property<DateTime>("DateServed");

                    b.Property<Guid>("DrugCodesID");

                    b.Property<byte>("Frequency");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsPaid");

                    b.Property<bool>("IsServed");

                    b.Property<byte>("NumberOfDays");

                    b.Property<string>("PatientsID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<byte>("QuantityIssued");

                    b.Property<byte>("QuantityRequested");

                    b.Property<string>("Receipt")
                        .HasMaxLength(20);

                    b.Property<string>("ReceivingOficcer")
                        .HasMaxLength(30);

                    b.Property<string>("RequestingOficcer")
                        .HasMaxLength(30);

                    b.Property<string>("ServingOficcer")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.HasIndex("DrugCodesID");

                    b.HasIndex("PatientsID");

                    b.ToTable("PatientDrugs");
                });

            modelBuilder.Entity("bStudioHospital.Model.Records.PatientAttendance", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateSeen");

                    b.Property<string>("PatientsID")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("VisitType")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("ID");

                    b.HasIndex("PatientsID");

                    b.ToTable("PatientAttendance");
                });

            modelBuilder.Entity("bStudioHospital.Model.Records.Patients", b =>
                {
                    b.Property<string>("PatientsID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20);

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DateAdded");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(6);

                    b.Property<string>("MobileNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("OtherNames")
                        .HasMaxLength(50);

                    b.Property<Guid?>("SchemesID");

                    b.Property<string>("Surname")
                        .HasMaxLength(50);

                    b.Property<string>("UserName")
                        .HasMaxLength(50);

                    b.HasKey("PatientsID");

                    b.HasIndex("SchemesID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("bStudioHospital.Model.Services.PatientServices", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("DatePaid");

                    b.Property<DateTime>("DateRequested");

                    b.Property<DateTime>("DateServed");

                    b.Property<byte>("Frequency");

                    b.Property<bool>("IsPaid");

                    b.Property<bool>("IsServed");

                    b.Property<byte>("NumberOfDays");

                    b.Property<string>("PatientsID")
                        .HasMaxLength(20);

                    b.Property<string>("Receipt")
                        .HasMaxLength(15);

                    b.Property<string>("ReceivingOficcer")
                        .HasMaxLength(30);

                    b.Property<string>("RequestingOficcer")
                        .HasMaxLength(30);

                    b.Property<Guid>("ServiceCodesID");

                    b.Property<decimal>("ServiceCost");

                    b.Property<string>("ServingOficcer");

                    b.HasKey("ID");

                    b.HasIndex("PatientsID");

                    b.HasIndex("ServiceCodesID");

                    b.ToTable("PatientServices");
                });

            modelBuilder.Entity("bStudioHospital.Model.Services.ServiceTypes", b =>
                {
                    b.Property<Guid>("ServiceTypesID")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("ServiceType")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<bool>("Status");

                    b.HasKey("ServiceTypesID");

                    b.ToTable("ServiceTypes");
                });

            modelBuilder.Entity("bStudioHospital.Model.Staff.Staff", b =>
                {
                    b.Property<string>("UserName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(30);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("UserName");

                    b.ToTable("Staff");
                });

            modelBuilder.Entity("bStudioHospital.Model.Wards", b =>
                {
                    b.Property<string>("WardName")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50);

                    b.Property<byte>("Capacity");

                    b.Property<byte[]>("Concurrency")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("PatientType")
                        .HasMaxLength(30);

                    b.Property<bool>("Status");

                    b.HasKey("WardName");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("WinClinic.Model.Records.PatientDetails", b =>
                {
                    b.Property<string>("PatientsID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("DependentID")
                        .HasMaxLength(20);

                    b.Property<bool>("IsCapitated");

                    b.Property<bool>("IsDependent");

                    b.Property<string>("Kin")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("KinContact")
                        .HasMaxLength(20);

                    b.Property<string>("SchemeNumber")
                        .HasMaxLength(20);

                    b.Property<Guid>("SchemesID");

                    b.Property<bool>("Status");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("PatientsID");

                    b.ToTable("PatientDetails");
                });

            modelBuilder.Entity("bStudioHospital.Model.Accounts.ServiceCodes", b =>
                {
                    b.HasOne("bStudioHospital.Model.Accounts.Schemes", "Schemes")
                        .WithMany("ServiceCodes")
                        .HasForeignKey("SchemesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bStudioHospital.Model.Accounts.Services", "Services")
                        .WithMany("ServiceCodes")
                        .HasForeignKey("ServicesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.Accounts.Services", b =>
                {
                    b.HasOne("bStudioHospital.Model.Services.ServiceTypes", "ServiceTypes")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.ConsultingRoom.AdmissionInstructions", b =>
                {
                    b.HasOne("bStudioHospital.Model.NursingCare.PatientAdmissions", "PatientAdmissions")
                        .WithMany("AdmissionInstructions")
                        .HasForeignKey("PatientAdmissionsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.ConsultingRoom.DiagnosticCodes", b =>
                {
                    b.HasOne("bStudioHospital.Model.ConsultingRoom.Diagnoses", "Diagnoses")
                        .WithMany("DiagnosticCodes")
                        .HasForeignKey("DiagnosesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bStudioHospital.Model.Accounts.Schemes", "Schemes")
                        .WithMany("DiagnosticCodes")
                        .HasForeignKey("SchemesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.ConsultingRoom.PatientConsultation", b =>
                {
                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patient")
                        .WithMany("PatientConsultation")
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.ConsultingRoom.PatientDiagnosis", b =>
                {
                    b.HasOne("bStudioHospital.Model.ConsultingRoom.DiagnosticCodes", "DiagnosticCodes")
                        .WithMany("PatientDiagnoses")
                        .HasForeignKey("DiagnosticCodesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patients")
                        .WithMany("PatientDiagnoses")
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.DrugCodes", b =>
                {
                    b.HasOne("bStudioHospital.Model.Pharmacy.Drugs", "Drugs")
                        .WithMany("DrugCodes")
                        .HasForeignKey("DrugsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bStudioHospital.Model.Accounts.Schemes", "Schemes")
                        .WithMany("DrugCodes")
                        .HasForeignKey("SchemesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.Laboratory.LaboratoryServices", b =>
                {
                    b.HasOne("bStudioHospital.Model.Laboratory.LabGroups", "LabGroup")
                        .WithMany("LaboratoryServices")
                        .HasForeignKey("LabGroupsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.Laboratory.PatientLaboratoryServices", b =>
                {
                    b.HasOne("bStudioHospital.Model.Laboratory.LaboratoryServices", "LaboratoryService")
                        .WithMany("PatientLaboratoryServices")
                        .HasForeignKey("LaboratoryServicesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patients")
                        .WithMany("PatientLaboratoryServices")
                        .HasForeignKey("PatientsID");
                });

            modelBuilder.Entity("bStudioHospital.Model.NursingCare.DrugAdministrations", b =>
                {
                    b.HasOne("bStudioHospital.Model.NursingCare.PatientMedications", "PatientMedications")
                        .WithMany("DrugAdministration")
                        .HasForeignKey("PatientMedicationsID1");
                });

            modelBuilder.Entity("bStudioHospital.Model.NursingCare.NursesWards", b =>
                {
                    b.HasOne("bStudioHospital.Model.Wards", "Wards")
                        .WithMany("NursesWards")
                        .HasForeignKey("WardName");
                });

            modelBuilder.Entity("bStudioHospital.Model.NursingCare.PatientAdmissions", b =>
                {
                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patients")
                        .WithMany("PatientAdmissions")
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bStudioHospital.Model.Wards", "Wards")
                        .WithMany("PatientAdmissioins")
                        .HasForeignKey("WardName");
                });

            modelBuilder.Entity("bStudioHospital.Model.NursingCare.PatientMedications", b =>
                {
                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patients")
                        .WithMany("PatientMedications")
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.OPD.OPD", b =>
                {
                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patients")
                        .WithMany("OpdHistory")
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.Pharmacy.PatientDrugs", b =>
                {
                    b.HasOne("bStudioHospital.Model.DrugCodes", "Drugcodes")
                        .WithMany()
                        .HasForeignKey("DrugCodesID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patients")
                        .WithMany("PatientDrugs")
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.Records.PatientAttendance", b =>
                {
                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patients")
                        .WithMany("PatientAttendance")
                        .HasForeignKey("PatientsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("bStudioHospital.Model.Records.Patients", b =>
                {
                    b.HasOne("bStudioHospital.Model.Accounts.Schemes", "Schemes")
                        .WithMany("Patients")
                        .HasForeignKey("SchemesID");
                });

            modelBuilder.Entity("bStudioHospital.Model.Services.PatientServices", b =>
                {
                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patients")
                        .WithMany("PatientServices")
                        .HasForeignKey("PatientsID");

                    b.HasOne("bStudioHospital.Model.Accounts.ServiceCodes", "ServiceCodes")
                        .WithMany()
                        .HasForeignKey("ServiceCodesID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WinClinic.Model.Records.PatientDetails", b =>
                {
                    b.HasOne("bStudioHospital.Model.Records.Patients", "Patients")
                        .WithOne("PatientDetails")
                        .HasForeignKey("WinClinic.Model.Records.PatientDetails", "PatientsID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
